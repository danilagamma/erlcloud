%% -*- mode: erlang; -*-
begin
    APPEND_TO_CONFIG
        = fun(Key, ToAppend, Config) ->
                 {value, {_, Values}, Rest} = lists:keytake(Key, 1, Config),
                 [{Key, ToAppend ++ Values}|Rest]
          end,
    case erlang:function_exported(rebar3, main, 1) of
        true -> % rebar3
            case os:getenv("ERLCLOUD_NIF_DECODERS") of
                "true" ->
                     CONFIG1 = APPEND_TO_CONFIG(deps,     [jiffy, b64fast],             CONFIG),
                    _CONFIG2 = APPEND_TO_CONFIG(erl_opts, [{d, 'ENABLE_NIF_DECODERS'}], CONFIG1);
                _ ->
                    CONFIG
            end;
        false -> % rebar 2.x or older
            %% Use git-based deps
            %% profiles
            CONFIG_DEPS =
            [{deps, [{meck, ".*",{git, "https://github.com/eproxus/meck.git", {tag, "0.9.0"}}},
                     {jsx, ".*", {git, "git://github.com/talentdeficit/jsx.git", {tag, "v2.11.0"}}},
                     %% {hackney, ".*", {git, "git://github.com/benoitc/hackney.git", {tag, "1.2.0"}}},
                     {eini, ".*", {git, "https://github.com/erlcloud/eini.git", {tag, "1.2.7"}}},
                     {lhttpc, ".*", {git, "git://github.com/erlcloud/lhttpc", {tag, "1.6.2"}}},
                     {base16, ".*", {git, "https://github.com/goj/base16.git", {tag, "1.0.0"}}}]}
             | lists:keydelete(deps, 1, CONFIG)],
            CONFIG_NEW =
                case os:getenv("WARNINGS_AS_ERRORS") of
                    "true" ->
                        APPEND_TO_CONFIG(erl_opt, [warnings_as_errors], CONFIG_DEPS);
                    _ ->
                        CONFIG_DEPS
                end,
            CONFIG_NEW
    end
end.
